<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/31/%E4%B8%80%E4%BA%9Btrick/"/>
    <url>/2023/05/31/%E4%B8%80%E4%BA%9Btrick/</url>
    
    <content type="html"><![CDATA[<h1 id="一些tricks"><a href="#一些tricks" class="headerlink" title="一些tricks"></a>一些tricks</h1><h2 id="urlparse解析不一致"><a href="#urlparse解析不一致" class="headerlink" title="urlparse解析不一致"></a>urlparse解析不一致</h2><p>关于<a href="http://172.18.19.3:8000/admin/%E7%9A%84%E8%A7%A3%E6%9E%90">http://172.18.19.3:8000\@www.aliyun.com/../admin/的解析</a></p><p>URL字符串确实会导致<code>urllib.parse.urlparse</code>和<code>requests.compat.urlparse</code>在解析上产生差异。</p><p>在<code>urllib.parse.urlparse</code>中，对于给定的URL字符串，<code>urlparse</code>函数会将其解析为以下组成部分：</p><ul><li>scheme: ‘http’</li><li>netloc: ‘172.18.19.3:<a href="mailto:&#x38;&#x30;&#x30;&#48;&#x40;&#119;&#119;&#x77;&#46;&#x61;&#108;&#105;&#x79;&#117;&#x6e;&#x2e;&#x63;&#x6f;&#109;">&#x38;&#x30;&#x30;&#48;&#x40;&#119;&#119;&#x77;&#46;&#x61;&#108;&#105;&#x79;&#117;&#x6e;&#x2e;&#x63;&#x6f;&#109;</a>‘</li><li>path: ‘&#x2F;..&#x2F;admin&#x2F;‘</li></ul><p>而在<code>requests.compat.urlparse</code>中，对于相同的URL字符串，<code>urlparse</code>函数的解析结果将会是：</p><ul><li>scheme: ‘http’</li><li>netloc: ‘172.18.19.3:8000’</li><li>path: ‘&#x2F;@<a href="http://www.aliyun.com/admin/&#39;">www.aliyun.com/../admin/&#39;</a></li></ul><p>可以看到，<code>urllib.parse.urlparse</code>将整个URL字符串作为<code>netloc</code>的一部分，而<code>requests.compat.urlparse</code>将其分割成了<code>netloc</code>和<code>path</code>。</p><p>这个问题的根源在于URL字符串中包含了非标准的字符，导致不同的解析器对其解析的方式产生差异。具体来说，URL字符串中的<code>\@</code>序列在不同的解析器中被解释为不同的内容。</p><p><code>urllib.parse.urlparse</code>是Python标准库中的URL解析函数，遵循RFC 3986标准对URL进行解析。根据该标准，<code>@</code>符号在URL中是一个保留字符，通常用于表示用户名和密码的分隔符。但是，<code>\@</code>序列在RFC 3986标准中没有定义，因此在<code>urllib.parse.urlparse</code>中，<code>\@</code>被视为普通字符的一部分，与后续的URL部分一起构成<code>netloc</code>。</p><p>而在<code>requests.compat.urlparse</code>中，可能是为了更好地与HTTP请求兼容，对<code>\@</code>序列进行了特殊处理。在该解析器中，<code>\@</code>被解释为一个普通的<code>@</code>符号，将<code>netloc</code>和<code>path</code>正确地分隔开。</p><p>因此，对于包含<code>\@</code>序列的URL字符串，<code>urllib.parse.urlparse</code>和<code>requests.compat.urlparse</code>解析结果的差异是由于它们对URL字符的解释方式不同所致。</p><h2 id="IPv4-mapped-IPv6"><a href="#IPv4-mapped-IPv6" class="headerlink" title="IPv4-mapped IPv6"></a>IPv4-mapped IPv6</h2><p>IPv4-mapped IPv6 地址是一种特殊的 IPv6 地址格式，用于将 IPv4 地址映射到 IPv6 地址空间中。它允许 IPv4 和 IPv6 网络之间的互操作性和过渡。</p><p>IPv4-mapped IPv6 地址的格式如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">rubyCopy code<br><span class="hljs-symbol">:</span><span class="hljs-symbol">:ffff</span><span class="hljs-symbol">:IPv4Address</span><br></code></pre></td></tr></table></figure><p>其中 <code>IPv4Address</code> 是一个标准的 IPv4 地址（例如，<code>192.0.2.1</code>）。</p><p>这种地址格式的前缀 <code>::ffff:</code> 表示这是一个 IPv4-mapped IPv6 地址。通过在 IPv6 地址的高位部分添加 <code>::ffff:</code> 前缀，IPv4 地址可以被表示为 IPv6 地址的一部分。</p><p>例如，如果有一个 IPv4 地址 <code>192.0.2.1</code>，对应的 IPv4-mapped IPv6 地址将是 <code>::ffff:192.0.2.1</code>。</p><p>IPv4-mapped IPv6 地址主要用于在 IPv6 网络中支持与 IPv4 网络的通信。这种格式的地址允许 IPv6 主机直接与 IPv4 主机进行通信，而无需进行地址转换。然而，要注意的是，IPv4-mapped IPv6 地址仅在受支持的网络设备和协议中才能被正确处理和识别。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>first blog</title>
    <link href="/2022/11/14/first-blog/"/>
    <url>/2022/11/14/first-blog/</url>
    
    <content type="html"><![CDATA[<p>拖了这么久还是小搭了一个<br>希望这次能多写点</p>]]></content>
    
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
